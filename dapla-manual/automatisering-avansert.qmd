# Automatisering Avansert

## Infrastruktur oversikt

![Infrastruktur](images/dapla-cloud-run-processor-example.png){fig-alt="Infrastruktur oversikt diagram" #fig-infrastruktur width="100%"}

## Ressurser

Som utgangspunkt, får hver prosesseringsinstans standard ressurstildeling for Cloud Run, dvs. 1 CPU kjerne og 512MB minne. Dette kan være for lite i noen tilfeller, særlig for større kildedatafiler. Hvis det oppleves at mer minne kreves, ta gjerne kontakt med [Dapla Kundeservice](https://ssb.pureservice.com/#/new/7) for å ordne dette.

## Tilgjengelige pakker

En liste over Python pakker man kan benytte seg av i `process_source_data.py` finnes [her](https://github.com/statisticsnorway/dapla-source-data-processor/blob/main/requirements.txt). Ta gjerne kontakt med [Dapla Kundeservice](https://ssb.pureservice.com/#/new/7) hvis man har behov for ytterligere.

## Skalering

Hver kilde kan skalere opp med parallele prosesseringsinstanser. Det gjør det kjappere å prosessere mange filer. I utgangspunktet er dette begrenset til 5 parallele instanser, men det kan økes ved behov.

## Validering

For å gi raskt tilbakemelding på noen mulige feilsituasjoner, så kjøres det enkel validering på kilde config og `process_source_data.py` når en [PR](./ordforklaringer.html#pull-request-pr) er opprettet.

Hvis valideringen feiler, så må feilen rettes før PRen merges.

Testene feiler hvis:

1. Kildemappen ikke har et python script kalt process_source_data.py med metodesignaturen, som beskrevet [her](./automatisering.qmd#skrive-prosesseringsscriptet).
1. Kildemappen ikke har en yaml fil og en gyldig folder_prefix definert, som i dette [eksempelet](./automatisering.qmd#innhold-i-config.yaml-for-boller).
1. Python scriptet ikke kan importeres av tjenesten. Tjenesten støtter kun [disse tredjeparts pakkene](#tilgjengelige-pakker).
1. Hvis [Pyflakes](./ordforklaringer.html#pyflakes) finner feil med kildens Python script.


### Validerings logger
Hvis validerings testene feiler kan det være nyttig å se på loggene for å finne frem til feilen.

1. Finn frem til testen som feiler, i bildet feiler valideringstestene for kilde1. Trykk så på lenken "Details" som vist i bilde under. ![GitHub test kilde1 feiler](images/fail-pr-tests-log-step1.png){fig-alt="GitHub test kilde1 feiler"}
1. På siden du nå har kommet til skal det være en tabell som heter "Build Information", trykk på lenken i Build kolonnen. ![Build Information tabell](images/fail-pr-tests-log-step2.png){fig-alt="Build Information tabell"}
1. Du har nå kommet frem til loggene, se etter indikasjoner på feil. I eksemplet under ser vi at testen test_main_accepts_expected_number_of_args feiler fordi `process_source_data.py` mangler en main funksjon. ![Cloud Run logg](images/fail-pr-tests-log-step3.png){fig-alt="Cloud Run logg"}
1. Fiks feilen og push endingen til samme branch, testen vil da starte på nytt.


## Utrulling
Endringer til `process_source_data.py` blir automatisk rullet ut når en [PR](./ordforklaringer.html#pull-request-pr) er merget til `main` branchen. Utrullingsprosessen tar noe tid, ca. 2-3 minutter fra branchen er merget til tjenesten er oppdatert, for å bekrefte at tjenesten er rullet ut kan du følge stegene i neste avsnitt.

### Bekrefte utrulling
Stegene under viser hvordan man går frem for å finne resultat av utrullingen av kilden "ledstill" for teamet "arbmark-skjema". Og forutsetter at koden er pushet til main branchen.

1. Naviger til [GitHub](https://github.com/).
1. I søkefeltet oppe i venstre hjørne skriv arbmark-skjema og klikk "Jump to" arbmark-skjema-iac. Som i bilde under. ![Søk etter arbmark-skjema på GitHub](images/search-team-iac-repo.png){fig-alt="Søk etter arbmark-skjema på GitHub"}
1. Når utrullingen er ferdig vil en av disse ikonene vises, grønn hake betyr at tjeneste er rullet ut med koden som ligger i main og at nye filer blir behandlet med koden som ligger der. ![Ikon: "hake, bygg gikk bra"](images/test-github-success.png){fig-alt="Ikon: hake, bygg gikk bra"}. Rødt kryss indikerer at utrullig har feilet. ![Ikon: "kryss, bygg feilet"](images/test-github-failure.png){fig-alt="Ikon: bygg feilet"} 
<br>Se etter symbolene der hvor den røde pilen i bilde under peker. I eksempel er utrulligen vellykket.
![Sjekkmerke GitHub](images/github-build-results1.png){fig-alt="Sjekkmerke GitHub"}
 
## Monitorering av tjenesten

Man får en oversikt over kildene man har konfigurert prosessering for og statusen på dem ved hjelp av konsollet på [GCP](./ordforklaringer.html#google-cloud-platform-gcp). Der navigerer man til siden for `Cloud Run` (se @fig-cloud-run-dashboard) som er kjøremiljøet som kildedata prosessering benyttes av. Eksempel URl er: `https://console.cloud.google.com/run?project=<teamets-prosjekt-id>`

Her får man en oversikt av ressursbruk og loggene til prosesseringen.

![Cloud Run dashboard](images/cloud-run-dashboard.png){fig-alt="Cloud Run dashboard" #fig-cloud-run-dashboard width="100%"}

### Logger
Etter du har valgt kilden kan du se logger ved å velge fanen "LOGS". Her ligger alle logger for den spesifikke kilden. For å få bedre oversikt over eventulle feil kan man sette severity til error. Dette vil uten ekstra konfigurasjon gi oversikt over alle uhåndterte exceptions. !["Sett log severity til error"](images/log-severity-error.png){fig-alt="Sett log severity til error"}

### Ubehandlede filer
Hvis en fil blir mottatt av tjenesten, men ikke lar seg behandle blir det skrevet til loggen. Man kan få en oversik over hvilke filer som ikke har blitt prosessert ved å søke etter:  ```Could not process object```.
![Cloud Run logs](images/cloud-run-dashboard-logs.png){fig-alt="Cloud Run logs" #fig-cloud-run-dashboard width="100%"}


## Trigge tjenesten manuelt
Noen ganger vil det være nødvendig å trigge kjøring av en kilde uten at de tilhørende filene i kildebøtta er oppdatert f.eks. etter en endring i prosseseringsskriptet. For å gjøre dette kan man benytte seg av dapla toolbelt.

For å trigge en ny kjøring må man være data-admin i teamet og ha denne informasjonen tilgjengelig:

1. project_id(prosjekt id) for kilden, den finner man ved å følge beskrivelsen [her](./gcc.qmd#velg-prosjekt). 
1. folder_prefix beskriver stien til filene som skal behandles og fungerer på samme måte som i [config.yaml](./automatisering.qmd#innhold-i-config.yaml-for-boller)
1. source_name finner man ved å se på navnet til mappen hvor kilden konfigureres, i eksempelet [her](./automatisering.qmd#struktur-i-iac-repo) ser vi at team `smaabakst` har to kilder `boller` og `rundstykker`.  

###  Eksempel
Dette eksemplet viser hvordan man går frem for å manuelt trigge kilden `boller` for team `smaabakst`.

Team `smaabakst` ønsker å re-prosessere alle filer i kilden `boller`. Ved å bruke samme folder_prefix som i `config.yaml` vil alle filer som tilhører kilden bli prosessert på nytt.

 ```python 
from dapla import trigger_source_data_processing

project_id = "prod-smaabakst-b69d"
source_name = "boller"
folder_prefix = "boller"

trigger_source_data_processing(project_id, source_name, folder_prefix)
``` 


