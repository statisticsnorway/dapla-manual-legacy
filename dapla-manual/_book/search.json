[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kom i gang med DAPLA",
    "section": "",
    "text": "DAPLA står for dataplattform og er SSBs nye plattform for statistikkproduksjon. Arbeidet startet som et utviklingsprosjekt i 2018 i sammenheng med Skatteetatens prosjekt Sirius. Idag er plattformen mer moden og klar for å ta imot flere statistikker. Denne boken er ment som\nDAPLA står for dataplattform og er SSBs nye plattform for statistikkproduksjon. Arbeidet startet som et utviklingsprosjekt i 2018 i sammenheng med Skatteetatens prosjekt Sirius. Idag er plattformen mer moden og klar for å ta imot flere statistikker. Denne boken er ment som\n\n\n\n\n\n\nDenne boken er skrevet med Quarto og er publisert på https://statisticsnorway.github.io/dapla-manual/. Alle ansatte i SSB kan bidra til boken ved klone dette repoet, gjøre endringer i en branch, og sende en pull request til administratorene av repoet (Team Statistikktjenester)."
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Forord",
    "section": "",
    "text": "Denne boken vil la SSB-ansatte ta i bruk grunnleggende funksjonalitet på DAPLA uten hjelp fra andre."
  },
  {
    "objectID": "introduksjon.html",
    "href": "introduksjon.html",
    "title": "Introduksjon",
    "section": "",
    "text": "Målet med dette kapitlet er å gi en grunnleggende innføring i hva som legges i ordet Dapla. I tillegg gis en forklaring på hvorfor disse valgene er tatt."
  },
  {
    "objectID": "arkitektur.html",
    "href": "arkitektur.html",
    "title": "3  Arkitektur",
    "section": "",
    "text": "Hvilke komponenter er plattformen bygd opp på? Forklart på lettest mulig måte."
  },
  {
    "objectID": "hva-er-dapla-team.html",
    "href": "hva-er-dapla-team.html",
    "title": "7  Hva er Dapla-team?",
    "section": "",
    "text": "Et Dapla-team fokuserer på statistikkproduksjon innen et eller flere emneområder på Dapla. Teamet er egentlig et arbeidsområde på Dapla, som gir medlemmene av teamet tilgang på teamet sine felles datalagre, roller og bakke-sky synkroniseringsområder.\nHvert Dapla-team får opprettet et prosjektområde i Google Cloud Platform (GCP), som er SSBs leverandør av skytjenester."
  },
  {
    "objectID": "ssb-project.html",
    "href": "ssb-project.html",
    "title": "14  SSB-project",
    "section": "",
    "text": "Produksjonsløp på Dapla kan med fordel følge noen helt klare retningslinjer for arbeidsprosesser og kode. Dette bør blant annet inkludere:\nTeam Statistikktjenester har laget en CLI2 som skal gjøre dette lett å implemententere dette i kode. Den heter ssb-project og hjelper deg implementere det som til enhver tid er beste-praksis for koding.\nUnder vises det hvordan man bruker ssb-project til sette opp et prosjekt. Men programmet forutsettet at du har en GitHub-bruker som er knyttet opp mot statisticsnorway. De første underkapitlene er derfor en beskrivelse av dette."
  },
  {
    "objectID": "ssb-project.html#opprett-github-bruker",
    "href": "ssb-project.html#opprett-github-bruker",
    "title": "14  SSB-project",
    "section": "14.1 Opprett GitHub-bruker",
    "text": "14.1 Opprett GitHub-bruker\nDette kapitlet er bare relevant hvis man ikke har en GitHub-brukerkonto fra før. For å bruke ssb-project-programmet til å generere et remote repo på GitHub må du ha en konto. Derfor starter vi med å gjøre dette. Det er en engangsjobb og du trenger aldri gjøre det igjen.\n\n\n\n\n\n\nSSB har valgt å ikke sette opp SSB-brukerne til de ansatte som GitHub-brukere. En viktig årsak er at er en GitHub-konto ofte regnes som en del av den ansattes CV. For de som aldri har brukt GitHub før kan det virke fremmed, men det er nok en fordel på sikt når alle blir godt kjent med denne arbeidsformen.\n\n\n\nSlik gjør du det:\n\nGå til https://github.com/\nTrykk Sign up øverst i høyre hjørne\nSvar på spørsmålene du blir stilt.\n\nHusk at du lager en personlig konto uavhengig av SSB. Brukernavnet kan være noe annet enn brukernavnet ditt i SSB. I neste steg skal vi knytte denne kontoen til din SSB-bruker."
  },
  {
    "objectID": "ssb-project.html#sec-tofaktor",
    "href": "ssb-project.html#sec-tofaktor",
    "title": "14  SSB-project",
    "section": "14.2 To-faktor autentifisering",
    "text": "14.2 To-faktor autentifisering\nHvis du har fullført forrige steg så har du nå en GitHub-konto. Hvis du står på din profil-side så ser den slik ut:\n\nDet neste vi må gjøre er å aktivere 2-faktor autentifisering, siden det er dette sin benyttes i SSB. Hvis du står på siden i bildet over, så gjør du følgende for å aktivere 2-faktor autentifisering mot GitHub:\n\n\n\nTrykk på den lille pilen øverst til høyre og velg Settings(se bilde til høyre).\nDeretter velger du Password and authentification i menyen til venstre.\n\n\n\n\n\n\n\nUnder Two-factor authentication trykker du på Add. Da får du opp følgende bilde:\n\n\n\n\n\nStrekkoden over skal skannes i din Microsoft Authenticator-app på mobilen. Åpne appen, trykk på Bekreftede ID-er, og til slutt trykk på Skann QR-kode. Deretter skanner du QR-koden fra punkt 3.\nNår koden er skannet har du fått opp følgende bilde på appens hovedside (se bilde til høyre). Skriv inn den 6-siffer koden på GitHub-siden med QR-koden.\nTil slutt lagrer du Recovery-codes et trygt sted på ditt hjemmeområdet.\n\n\n\n\n\n\nNå har vi aktivert 2-faktor autentifisering for GitHub og er klare til å knytte vår personlige konto til vår SSB-bruker på statisticsnorway."
  },
  {
    "objectID": "ssb-project.html#koble-deg-til-ssb",
    "href": "ssb-project.html#koble-deg-til-ssb",
    "title": "14  SSB-project",
    "section": "14.3 Koble deg til SSB",
    "text": "14.3 Koble deg til SSB\nI forrige steg aktiverte vi 2-faktor autentifisering for GitHub. Det neste vi må gjøre er å bruke denne autentifiseringen til koble oss til SSB sin bedriftskonto statisticsnorway. Det er dette som gjør at vi kan jobbe med SSB-kode som ligger lagret på GitHub.\n\nGå til profilsiden din og velg Settings slik du gjorde i punkt 1 i forrige delkapitel.\nTrykk deretter på Organizations i menyen til venstre.\nTrykk deretter på New organization.\nSøk etter statisticsnorway."
  },
  {
    "objectID": "ssb-project.html#personal-access-token-pat",
    "href": "ssb-project.html#personal-access-token-pat",
    "title": "14  SSB-project",
    "section": "14.4 Personal Access Token (PAT)",
    "text": "14.4 Personal Access Token (PAT)\nNår vi skal jobbe med SSB-kode som ligger lagret hos statistcsnorway på GitHub, så må vi autentifisere oss. Måten vi gjøre det på er ved å generere et Personal Access Token (ofte forkortet PAT) som vi oppgir når vi vil hente eller oppdatere kode på GitHub. Da sender vi med PAT for å autentifisere oss for GitHub.\n\n14.4.1 Opprette PAT\nFor å lage en PAT som er godkjent mot statisticsnorway så gjør man følgende:\n\nGå til din profilside på GitHub og åpne Settings slik som ble vist Section 14.2.\nVelg Developer Settings i menyen til venstre.\nI menyen til venstre velger du Personal Access Token, og deretter Tokens (classic).\nUnder Note kan du gi PAT`en et navn. Velg et navn som er intuitivt for deg. Hvis du skal bruke PAT til å jobbe mot Dapla, så ville jeg ganske enkelt kalt den dapla. Hvis du skal bruke den mot bakkemiljøet ville jeg kalt den prodsone eller noe annet som gjør det lett for det skjønne innholdet i ettertid.\nUnder Expiration velger du hvor lang tid som skal gå før PAT blir ugyldig. Dette er en avvening mellom sikkerhet og hva som er praktisk. En grei mellomløsning kan være å velge 3 måneder. Når PAT går ut må du gjenta stegene i dette kapitlet.\nUnder Select scopes velger du Repo (se bilde under).\n\n\n\nTrykk på Generate token nederst på siden og du får opp noe som ser ut som dette:\n\n\n\nKopier deretter PAT til en midlertidig fil. Grunnen er at du aldri vil se det igjen her etter at vi har gjennomført neste steg.\nDeretter trykker du på Configure SSO og velger Authorize ved siden statisticsnorway. Svar deretter på spørsmålene som dukker opp.\n\n\nVi har nå opprettet en PAT som er godkjent for bruk mot SSB sin kode på GitHub. Det betyr at hvis vi vil jobbe med Git på SSB sine maskiner i sky eller på bakken, så må vi sendte med dette tokenet for å få lov til å jobbe med koden som ligger på statisticsnorway på GitHub.\n\n\n14.4.2 Lagre PAT\nDet er ganske upraktisk å måtte sende med tokenet hver gang vi skal jobbe med GitHub. Vi bør derfor lagre det lokalt der vi jobber, slik at Git automatisk finner det. Det finnes mange måter å gjøre dette på og det er ikke bestemt hva som skal være beste-praksis i SSB. Men en måte å gjøre det er via en .netrc-fil. Vi oppretter da en fil som heter .netrc på vårt hjemmeområde, og legger følgende informasjon på en (hvilken som helst) linje i filen:\nmachine github.com login <github-bruker> password <Personal Access Token>\nGitHub-bruker er da din personlige bruker og IKKE brukernavnet ditt i SSB. Personal Access Token er det vi lagde\nEn veldig enkel måte å lagre dette er som følger. Anta at min personlige GitHub-bruker er SSB-Chad og at min Personal Access Token er blablabla. Da kan jeg gjøre følgende for å lagre det i .netrc:\n\nGå inn i Jupyterlab og åpne en Python-notebook.\nI den første kodecellen skriver du:\n!echo \"machine github.com login SSB-Chad password blablabla\" >> ~/.netrc\n\nAlternativt kan du droppe det utropstegnet og kjøre det direkte i en terminal. Det vil gi samme resultat. Koden over legger til en linje med teksten machine github.com login SSB-Chad password blablabla i en .netrc-fil på din hjemmeområdet, uanvhengig av om du har en fra før eller ikke. Hvis du har en fil fra før som allerede har et token fra GitHub, ville jeg nok slettet det før jeg legger en et nytt token.\nHver gang du jobber mot GitHub vil Git sjekke om informasjon om autentifisering ligger i denne filen, og bruke den hvis den ligger der.\n\n\n14.4.3 Oppdater PAT\nI eksempelet over lagde vi en PAT som var gyldig i 90 dager. Dermed vil du ikke kunne jobbe mot GitHub med dette tokenet etter 90 dager. For å oppdatere tokenet gjør du følgende:\n\nLag et nytt PAT ved å repetere Section 14.4.1.\nI miljøet der du skal jobbe med Git og GitHub går du inn i din .netrc og bytter ut token med det nye.\n\nOg med det er du klar til å jobbe mot staisticsnorway på GitHub."
  },
  {
    "objectID": "ssb-project.html#opprett-ssb-project",
    "href": "ssb-project.html#opprett-ssb-project",
    "title": "14  SSB-project",
    "section": "14.5 Opprett ssb-project",
    "text": "14.5 Opprett ssb-project\nProgrammet ssb-project skal gjøre det enklere å organiserer kode etter god praksis i en statistikkproduksjoner. Som nevnt i innledningen vil progammet gi deg en mappestruktur, virtuelt miljø og en jupyter-kernel. Hvis du ønsker kan det også opprette et GitHub-repo. Ønsker du alt gjør du følgende:\n\nÅpne en terminal. De fleste vil gjøre dette i Jupyterlab på bakke eller sky og da kan de bare trykke på det blå +-tegnet i Jupyterlab og velge Terminal.\nFør vi kjører programmet må vi være obs på at ssb-project vil opprette en ny mappe der vi står. Gå derfor til den mappen du ønsker å ha den nye prosjektmappen. For å opprette et prosjekt som heter stat-testprod Deretter skriver du følgende i terminalen:\n\nssb-project create stat-testprod\n\n\nHvis du stod i hjemmemappen din på når du skrev inn kommandoen over i terminalen, så har du fått mappestrukturen som vises i bildet til høyre. 3. Den inneholder følgende :\n\n.git-mappe som blir opprettet for å versjonshåndtere med Git.\nsrc-mappe som skal inneholde all koden som utgjør produksjonsløpet.\ntests-mappe som inneholder tester du skriver for koden din.\nLICENCE-fil som skal benyttes for public-repos i SSB.\npoetry.lock-fil som inneholder alle versjoner av Python-pakker som blir brukt.\nREADME.md-fil som brukes for tekstlig innhold på GitHub-siden for prosjektet.\n\n\n\n\n\n\nOver så opprettet vi et ssb-project uten å opprette et GitHub-repo med samme navn. Hvis du ønsker å opprette et GitHub-repo også må du endre kommandoen over til:\nssb-project create stat-testprod --github github-token='blablabla'\nKommandoen over oppretter en mappestruktur slik vi så tidligere, men også et ssb-project som heter stat-testprod med et GitHub-repo med samme navn. Repoet i GitHub ser da slik ut:"
  },
  {
    "objectID": "git-github.html",
    "href": "git-github.html",
    "title": "15  Git og Github",
    "section": "",
    "text": "I SSB anbefales det man versjonhåndterer koden sin med Git og deler koden via GitHub. For å lære seg å bruke disse verktøyene på en god måte er det derfor viktig å forstå forskjellen mellom Git og Github. Helt overordnet er forskjellen følgende:\nAv definisjonene over så skjønner vi at det er Git som gir oss all funksjonalitet for å lagre versjoner av koden vår. GitHub er mer som et valg av mappesystem. Men måten kodemiljøene våre er satt opp på Dapla så har vi ingen fellesmappe som alle kan kjøre koden fra. Man utvikler kode i sin egen hjemmemappe, som bare du har tilgang til, og når du skal samarbeide med andre, så må du sende koden til GitHub. De du samarbeider med må deretter hente ned denne koden før de kan kjøre den.\nI dette kapitlet ser vi nærmere på Git og Github og hvordan de er implementert i SSB. Selv om SSB har laget programmet ssb-project for å gjøre det lettere å bl.a. forholde seg til Git og GitHub, så vil vi dette kapitlet forklare nærmere hvordan det funker uten dette hjelpemiddelet. Forhåpentligvis vil det gjøre det lettere å håndtere mer kompliserte situasjoner som oppstår i arbeidshverdagen som statistikker."
  },
  {
    "objectID": "git-github.html#git",
    "href": "git-github.html#git",
    "title": "15  Git og Github",
    "section": "15.1 Git",
    "text": "15.1 Git\nGit er terminalprogram som installert på maskinen du jobber. Hvis man ikke liker å bruke terminalen finnes det mange pek-og-klikk versjoner av Git, blant annet i Jupyterlab, SAS EG og RStudio. Men typisk vil det en eller annen gang oppstå situasjoner der det ikke finnes løsninger i pek-og-klikk versjonen, og man må ordne opp i terminalen. Av den grunn velger vi her å fokusere på hvordan Git fungerer fra terminalen. Vi vil også fokusere på hvordan Git fungerer fra terminalen i Jupyterlab på Dapla.\n\n15.1.1 Hva er Git?\nKommer snart. Kort forklaring med lenke til mer utfyllende svar.\n\n\n15.1.2 Oppsett av Git\nKommer snart. Scriptet til Kvakk.\n\n\n15.1.3 Git og Notebooks\nKommer snart. Jupytext og nbsripout. json.\n\n\n15.1.4 Vanlige Git-operasjoner\nKommer snart. clone, add, commit, push, pull, merge, revert, etc."
  },
  {
    "objectID": "git-github.html#github",
    "href": "git-github.html#github",
    "title": "15  Git og Github",
    "section": "15.2 GitHub",
    "text": "15.2 GitHub"
  },
  {
    "objectID": "virtual-env.html",
    "href": "virtual-env.html",
    "title": "16  Virtuelle miljøer",
    "section": "",
    "text": "Et python viretuelt miljø inneholder en spesifikk versjon av python og et sett med pakker. Pakkene er kun tilgjengelige når det viretuelt miljøet er aktivert. Dette gjør at man ungår avhengighetskonflikter på tvers av prosjekter.\nSe her for mer informasjon om viretuelle miljøer.\n\n\nDet er anbefalt å benytte verktøyet poetry for å administrere prosjekter og deres viretuelle miljø.\nPoetry setter opp virtuelt miljø, gjør det enkelt å oppdatere avhengigheter, sette versjons begrensninger og reprodusere prosjektet.\nPoetry gjør dette ved å lagre avhengigheters eksakte versjon i prosjektets “poetry.lock”. Og eventuelle begrensninger i “pyproject.toml”. Dette gjør det enkelt for andre å bygge prosjektet med akkurat de samme pakkene og begrensningene."
  },
  {
    "objectID": "virtual-env.html#r",
    "href": "virtual-env.html#r",
    "title": "16  Virtuelle miljøer",
    "section": "16.2 R",
    "text": "16.2 R"
  },
  {
    "objectID": "pakke-install.html",
    "href": "pakke-install.html",
    "title": "18  Installere pakker",
    "section": "",
    "text": "Installering av pakker er kun er mulig I et virtuelt miljø. Det er anbefalt å benytte poetry til dette. Eksemplene videre tar derfor utgangspunkt i et poetry prosjekt.\nDet er mulig å installere pakker med pip. Pakker kan installeres som normalt, hvis man har satt opp og aktivert et virtuelt miljø.\n\n\nDette eksemplet viser hvordan man setter oppe et enkelt poetry prosjekt kalt test, hvis man ønsker å benytte et annet prosjektnavn må man endre dette i hver av kommandoene.\nSett opp prosjektet:\npoetry new test\nNaviger inn i prosjektmappen:\ncd test\nBruk poetry install for å bygge prosjektet:\npoetry install\nHvis man får en tilbakemelding som denne er prosjektet satt opp korrekt:\nCreating virtualenv test-EojoH6Zm-py3.10 in /home/jovyan/.cache/pypoetry/virtualenvs \nUpdating dependencies \nResolving dependencies... (0.1s) \n\nWriting lock file \n\n\n\nFor å legge til pakker i et prosjekt benyttes kommandoen poetry add.\nSkal man legge til pakken “pendulum” vil det se slik ut:\npoetry add pendulum\nPoetry tilbyr måter å sette versjonsbegrensninger for pakker som legges til i et prosjekt, dette kan man lese mer om her.\n\n\n\nFor å fjerne pakker fra et prosjekt benytter man poetry remove.\nHvis man ønsker å fjerne “pendulum” fra et prosjekt vil kommandoen se slik ut:\npoetry remove pendulum\n\n\n\nFor å oppdatere pakker i et prosjekt benytter man kommandoen poetry update.\nSkal man oppdatere pakken “pendulum” bruker man:\npoetry update pendulum\nSkal man oppdatre alle pakken i et prosjekt benytter man:\npoetry update \n\n\n\nFor å kunne benytte det virtuelle miljøet i en notebook må man sette opp en kernel. Kernel burde gis samme navn som prosjektet.\nFørst legger man til ipykernel:\npoetry add ipykernel\nSå opprettes kernel med:\npoetry run python -m ipykernel install --user --name test\nEtter dette er kernelen test opprettet og kan velges for å benytte miljøet i en notebook.\n\n\n\nFor å fjerne en kernel med navn test bruker man:\njupyter kernelspec remove test\nDu vil bli spurt om å bekrefte, trykk y hvis man ønsker å slette:\nKernel specs to remove:\n  test                    /home/jovyan/.local/share/jupyter/kernels/test\nRemove 1 kernel specs [y/N]: y\nEtter dette er kernelen fjernet.\n\n\n\nHvem som helst kan legge til pakker på PyPi, det betyr at de i verstefall, kan inneholde skadelig kode. Her er en list med viktige tiltak som minimere risikoen:\n\nFør man installerer pakker bør man alltid søke de opp på https://pypi.org. Det er anbefalt å klippe og lime inn pakkenavnet når man skal legge det til i et prosjekt.\nEr det et populært/velkjent prosjekt? Hvor mange stjerner og forks har repoet?"
  },
  {
    "objectID": "pakke-install.html#r",
    "href": "pakke-install.html#r",
    "title": "18  Installere pakker",
    "section": "18.2 R",
    "text": "18.2 R\n\n18.2.1 Installering\n\n\n18.2.2 Avinstallering\n\n\n18.2.3 Oppgradere pakker"
  },
  {
    "objectID": "samarbeid.html",
    "href": "samarbeid.html",
    "title": "19  Samarbeid",
    "section": "",
    "text": "Noen har opprettet et ssb-project og pushet til Github. Hvordan skal kollegaer gå frem for å bidra inn i koden?"
  },
  {
    "objectID": "pakke-install-bakken.html",
    "href": "pakke-install-bakken.html",
    "title": "21  Installere pakker",
    "section": "",
    "text": "Installering av pakker i Jupyter miljøer på bakken (f.eks https://sl-jupyter-p.ssb.no) foregår stort sett helt lik som på Dapla. Det er én viktig forskjell, og det er at installasjon skjer via en proxy som heter Nexus.\n\n\nPip er ferdig konfigurert for bruk av Nexus og kan kjøres som beskrevet for Dapla\n\n\n\nHvis man bruker Poetry for håndtering av pakker i et prosjekt, så må man kjøre følgende kommando i prosjekt-mappe etter prosjektet er opprettet.\npoetry source add --default nexus `echo $PIP_INDEX_URL`\nDa får man installere pakker som vanlig f.eks\npoetry add matplotlib\n\n\n\n\n\n\nHvis man forsøker å installere prosjektet i et annet miljø (f.eks Dapla), så må man fjerner nexus kilden ved å kjøre\npoetry source remove nexus"
  },
  {
    "objectID": "pakke-install-bakken.html#r",
    "href": "pakke-install-bakken.html#r",
    "title": "21  Installere pakker",
    "section": "21.2 R",
    "text": "21.2 R\n\n21.2.1 Installering\n\n\n21.2.2 Avinstallering\n\n\n21.2.3 Oppgradere pakker"
  },
  {
    "objectID": "lese-data-bakken.html",
    "href": "lese-data-bakken.html",
    "title": "22  Lese inn filer",
    "section": "",
    "text": "Mer kommer."
  },
  {
    "objectID": "lese-data-bakken.html#sas7bdat",
    "href": "lese-data-bakken.html#sas7bdat",
    "title": "22  Lese inn filer",
    "section": "22.1 sas7bdat",
    "text": "22.1 sas7bdat"
  },
  {
    "objectID": "lese-data-bakken.html#oracle",
    "href": "lese-data-bakken.html#oracle",
    "title": "22  Lese inn filer",
    "section": "22.2 Oracle",
    "text": "22.2 Oracle"
  },
  {
    "objectID": "lese-data-bakken.html#fame",
    "href": "lese-data-bakken.html#fame",
    "title": "22  Lese inn filer",
    "section": "22.3 Fame",
    "text": "22.3 Fame"
  },
  {
    "objectID": "lese-data-bakken.html#tekstfiler",
    "href": "lese-data-bakken.html#tekstfiler",
    "title": "22  Lese inn filer",
    "section": "22.4 Tekstfiler",
    "text": "22.4 Tekstfiler"
  },
  {
    "objectID": "lese-data-bakken.html#parquet",
    "href": "lese-data-bakken.html#parquet",
    "title": "22  Lese inn filer",
    "section": "22.5 Parquet",
    "text": "22.5 Parquet"
  },
  {
    "objectID": "remote.html",
    "href": "remote.html",
    "title": "23  IDE’er",
    "section": "",
    "text": "Forklare situasjonen nå. Kun Jupyterlab. Kan kjøre remote session med Rstudio, Pycharm og VSCode."
  },
  {
    "objectID": "remote.html#rstudio",
    "href": "remote.html#rstudio",
    "title": "23  IDE’er",
    "section": "23.1 RStudio",
    "text": "23.1 RStudio"
  },
  {
    "objectID": "remote.html#vscode",
    "href": "remote.html#vscode",
    "title": "23  IDE’er",
    "section": "23.2 VSCode",
    "text": "23.2 VSCode"
  },
  {
    "objectID": "remote.html#pycharm",
    "href": "remote.html#pycharm",
    "title": "23  IDE’er",
    "section": "23.3 Pycharm",
    "text": "23.3 Pycharm"
  },
  {
    "objectID": "databaser.html#cloudsql",
    "href": "databaser.html#cloudsql",
    "title": "25  Databaser",
    "section": "25.2 CloudSQL",
    "text": "25.2 CloudSQL"
  },
  {
    "objectID": "hvorfor-dapla.html",
    "href": "hvorfor-dapla.html",
    "title": "2  Hvorfor Dapla?",
    "section": "",
    "text": "Som dataplattform skal Dapla stimulerere til økt kvalitet på statistikk og forskning, samtidig som den gjør organisasjonen mer tilpasningsdyktig i møte med fremtiden.\n\n\nDen nye skybaserte dataplattformen (Dapla) skal bli viktig for å effektivisere arbeids-og produksjonsprosesser, den skal sikre effektiv lagring og gjenfinning av data og metadata, og støtte opp under deling av data på tvers av statistikkområder.\n\nKilde: Langtidsplan for SSB (2022-2024)\n\n\n\nMålet med Dapla er å tilby tjenester og verktøy som lar statistikkprodusenter og forskere produsere resultater på en sikker og effektiv måte."
  }
]