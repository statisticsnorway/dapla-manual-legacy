# Git og Github

I SSB anbefales det man versjonhåndterer koden sin med [Git](https://git-scm.com/) og deler koden via [GitHub](https://github.com/). For å lære seg å bruke disse verktøyene på en god måte er det derfor viktig å forstå forskjellen mellom Git og Github. Helt overordnet er forskjellen følgende:

- **Git** er programvare som er installert på maskinen du jobber på og som sporer endringer i koden din.
- **GitHub** er et slags felles mappesystem på internett som lar deg dele og samarbeide med andre om kode.

Av definisjonene over så skjønner vi at det er **Git** som gir oss all funksjonalitet for å lagre versjoner av koden vår. GitHub er mer som et valg av mappesystem. Men måten kodemiljøene våre er satt opp på **Dapla** så har vi ingen fellesmappe som alle kan kjøre koden fra. Man utvikler kode i sin egen hjemmemappe, som bare du har tilgang til, og når du skal samarbeide med andre, så må du sende koden til GitHub. De du samarbeider med må deretter hente ned denne koden før de kan kjøre den.

I dette kapittelet ser vi nærmere på Git og Github og hvordan de er implementert i SSB. Selv om SSB har laget programmet **ssb-project** for å gjøre det lettere å bl.a. forholde seg til Git og GitHub, så vil vi dette kapittelet forklare nærmere hvordan det funker uten dette hjelpemiddelet. Forhåpentligvis vil det gjøre det lettere å håndtere mer kompliserte situasjoner som oppstår i arbeidshverdagen som statistikker.

## Git {{< fa brands git-alt >}}

**Git** er terminalprogram som installert på maskinen du jobber. Hvis man ikke liker å bruke terminalen finnes det mange pek-og-klikk versjoner av **Git**, blant annet i **Jupyterlab**, **SAS EG** og **RStudio**. Men typisk vil det en eller annen gang oppstå situasjoner der det ikke finnes løsninger i pek-og-klikk versjonen, og man må ordne opp i terminalen. Av den grunn velger vi her å fokusere på hvordan **Git** fungerer fra terminalen. Vi vil også fokusere på hvordan **Git** fungerer fra **terminalen** i **Jupyterlab** på **Dapla**.

### Hva er Git?

Kommer snart. Kort forklaring med lenke til mer utfyllende svar.

### Oppsett av Git

Mer kommer.

#### Minimal Git-konfigurasjon

For å brukt Git er det strengt tatt to ting som må konfigurere:

1. Brukernavn
2. E-post

Denne informasjonen brukes av Git hver gang du sjekker inn en endring i koden slik at man kan vite hvem som gjorde endringen senere. Dette må settes én gang per miljø hvor du skal jobbe med Git. Hvis du f.eks. jobber i **Jupyterlab** på **Dapla** så kan du åpne en terminal og skrive følgende for å lagre ditt brukernavn:

`git config --global user.name "Ola Nordmann"`

For å sette e-post gjør du veldig lignende: 

`git config --global user.email olanordamnn@ssb.no`

Når du har kjørt disse to kommandoene så kan du bruke Git. Informasjonen du la til over brukes ikke til noe annet enn å fortelle de du samarbeider med om at du har gjort endringer på koden. Den er verken knyttet opp mot din SSB-bruker eller din GitHub-bruker.

### Git og Notebooks

Kommer snart. Jupytext og nbsripout. json.

### Vanlige Git-operasjoner

Kommer snart. clone, add, commit, push, pull, merge, revert, etc.


## GitHub {{< fa brands github >}}

GitHub er et nettsted som fungerer som vårt felles mappesystem for deling av kode. SSB har sin egen organisasjonskonto med navn [statisticsnorway](https://github.com/statisticsnorway) 

### Opprett GitHub-bruker

Dette kapittelet er bare relevant hvis man ikke har en GitHub-brukerkonto fra før. For å bruke `ssb-project`-programmet til å generere et **remote repo** på GitHub må du ha en konto. Derfor starter vi med å gjøre dette. Det er en engangsjobb og du trenger aldri gjøre det igjen.

::: {.callout-note appearance="simple"}
SSB har valgt å ikke sette opp SSB-brukerne til de ansatte som GitHub-brukere. En viktig årsak er at er en GitHub-konto ofte regnes som en del av den ansattes CV. For de som aldri har brukt GitHub før kan det virke fremmed, men det er nok en fordel på sikt når alle blir godt kjent med denne arbeidsformen.
:::

Slik gjør du det:

1. Gå til <https://github.com/>
2. Trykk **Sign up** øverst i høyre hjørne
3. I dialogboksen som åpnes, se @fig-github-user-gen, skriver du inn din e-postkonto og lager et passord. Dette trenger ikke være din SSB-bruker og e-post.  Vi anbefaler at du bruker en personlig e-postkonto og velger ditt eget passord. Det samme gjelder **brukernavn** også.

![Dialogboks for opprettelse av GitHub-bruker.](images/github_register.JPG){fig-alt="Bilde av GitHub-siden for å generere en brukerkonto" #fig-github-user-gen}

Du har nå laget en egen GitHub-bruker. I neste steg skal vi knytte denne kontoen til din SSB-bruker.

### To-faktor autentisering {#sec-tofaktor}

Hvis du har fullført forrige steg så har du nå en GitHub-konto. Hvis du står på din profil-side så ser den ut som i @fig-github-exmaple-userpage.

![Et eksempel på hjemmeområdet til en GitHub-bruker](images/github_profile.png){fig-alt="Bilde av GitHub-siden for en bruker" #fig-github-exmaple-userpage}

Det neste vi må gjøre er å aktivere 2-faktor autentisering, siden det er dette som benyttes i SSB. Hvis du står på siden i bildet over, så gjør du følgende for å aktivere 2-faktor autentisering mot GitHub:

::: {.grid}

::: {.g-col-8}
1. Trykk på den lille pilen øverst til høyre og velg **Settings**(se @fig-github-open-settings).

2. Deretter velger du **Password and authentification** i menyen til venstre.

3. Under **Two-factor authentication** trykker du på **Enable**.

:::

::: {.g-col-4}
![Åpne settings for din GitHub-bruker.](images/github_settings_menu.png){ fig-alt="Bilde av GitHub-menyen for å åpne Settings-menyen." #fig-github-open-settings width=50% }

:::

:::

4. @fig-github-enable-2fa viser dialogboksen som vises. Velg **Enable two-factor authentification**.

![Dialogboks som åpnes når 2FA skrus på første gang.](images/github_2fa_enable.JPG){ fig-alt="Bilde av GitHub-dialogboks for å skru på 2-faktor autentisering." #fig-github-enable-2fa }

5. @fig-github-2fa-app viser dialogboksen som vises for å velge hvordan man skal autentisere seg. Her anbefales det å velge **Set up using an app**, slik at du kan bruke *Microsoft Authenticator*-appen på din mobil. 

![Dialogboks for å velge hvordan man skal autentisere seg med 2FA.](images/githbu_2fa_app.JPG){ fig-alt="Bilde av GitHub-dialogboks for å velge hvordan man skal autentisere seg med 2-faktor autentisering." #fig-github-2fa-app }

@fig-github-QR viser QR-koden som vises. Denne skal vi bruke i neste steg.

![QR-kode som skannes av Microsoft Authenticator.](images/github_2fa.png){ fig-alt="Bilde av GitHub-dialogboks for å velge hvordan man skal autentisere seg med 2-faktor autentisering." #fig-github-QR }

::: {.grid}

::: {.g-col-8}
6. Strekkoden over skal skannes i din **Microsoft Authenticator**-app på mobilen, som vist i @fig-authenticator. Åpne appen, trykk på **Bekreftede ID-er**, og til slutt trykk på **Skann QR-kode**. Deretter skanner du QR-koden fra punkt 5.

7. Når koden er skannet har du fått opp følgende bilde på appens hovedside (se bilde til høyre). Skriv inn den 6-siffer koden på GitHub-siden med QR-koden.

8. Til slutt lagrer du **Recovery-codes** et trygt sted som bare du har tilgang til.

:::

::: {.g-col-4}
![Mobilappen *Microsoft authenticator*](images/authenticator.jpg){ fig-alt="Bilde av GitHub-dialogboks for å velge hvordan man skal autentifisere seg med 2-faktor autentisering." #fig-authenticator width=50% }

:::

:::

Nå har vi aktivert 2-faktor autentisering for GitHub og er klare til å knytte vår personlige konto til vår SSB-bruker på SSBs "Github organisation" [**statisticsnorway**](https://github.com/statisticsnorway).

### Koble deg til SSB

I forrige steg aktiverte vi 2-faktor autentisering for GitHub. Det neste vi må gjøre er å bruke denne autentiseringen til å koble oss til SSB sin organisasjon **statisticsnorway**. Det er dette som gjør at vi kan jobbe med SSB-kode som ligger lagret på GitHub.

1. Gå til profilsiden din og velg **Settings** slik du gjorde i punkt 1 i forrige delkapittel.

2. Trykk deretter på **Organizations** i menyen til venstre.

3. Trykk deretter på **New organization**.

4. Søk etter **statisticsnorway**.


### Personal Access Token (PAT)

Når vi skal jobbe med SSB-kode som ligger lagret hos **statistcsnorway** på GitHub, så må vi autentisere oss.  Måten vi gjøre det på er ved å generere et **Personal Access Token** (ofte forkortet *PAT*) som vi oppgir når vi vil hente eller oppdatere kode på GitHub. Da sender vi med PAT for å autentisere oss for GitHub.

#### Opprette PAT {#sec-pat}

For å lage en PAT som er godkjent mot *statisticsnorway* så gjør man følgende:

1. Gå til din profilside på GitHub og åpne **Settings** slik som ble vist @sec-tofaktor.

2. Velg **Developer Settings** i menyen til venstre.

3. I menyen til venstre velger du **Personal Access Token**, og deretter **Tokens (classic)**.

5. Under **Note** kan du gi PAT'en et navn. Velg et navn som er intuitivt for deg. Hvis du skal bruke PAT til å jobbe mot Dapla, så ville jeg ganske enkelt kalt den *dapla*. Hvis du skal bruke den mot bakkemiljøet ville jeg kalt den *prodsone* eller noe annet som gjør det lett for det skjønne innholdet i ettertid.

6. Under **Expiration** velger du hvor lang tid som skal gå før PAT blir ugyldig. Dette er en avvening mellom sikkerhet og hva som er praktisk. Det anbefales at du velger **365 dager**. Når PAT utløper må du gjenta stegene i dette kapittelet.

7. Under **Select scopes** velger du **Repo** slik som vist i @fig-github-token.

![Gi token et kort og beskrivende navn](images/github_pat.png){fig-alt="Bilde av GitHub-siden for generering av Personal Access Token" #fig-github-token}

8. Trykk på **Generate token** nederst på siden og du får noe lignende det du ser i @fig-github-token-gen.

![Token som ble generert.](images/github_pat2.png){fig-alt="Bilde av GitHub-siden for det genererte tokenet" #fig-github-token-gen}

9. Kopier deretter PAT til en midlertidig fil. Grunnen er at du aldri vil se det igjen her etter at vi har gjennomført neste steg.

10. Deretter trykker du på **Configure SSO** og velger **Authorize** ved siden statisticsnorway, slik som vist i @fig-github-token-authorize. Svar deretter på spørsmålene som dukker opp.

![Autorisering av Token mot SSBs GiHub-organisasjon.](images/github_pat3.png){fig-alt="Bilde av GitHub-siden for å autorisere Token mot statisticsnorway" #fig-github-token-authorize}

Vi har nå opprettet en PAT som er godkjent for bruk mot SSB sin kode på GitHub. Det betyr at hvis vi vil jobbe med **Git** på SSB sine maskiner i sky eller på bakken, så må vi sendte med dette tokenet for å få lov til å jobbe med koden som ligger på **statisticsnorway** på GitHub.

#### Lagre PAT

Det er ganske upraktisk å måtte sende med tokenet hver gang vi skal jobbe med GitHub. Vi bør derfor lagre det lokalt der vi jobber, slik at Git automatisk finner det. Det finnes mange måter å gjøre dette på og det er ikke bestemt hva som skal være beste-praksis i SSB. Men en måte å gjøre det er via en **.netrc**-fil. Vi oppretter da en fil som heter **.netrc** på vårt hjemmeområde, og legger følgende informasjon på en (hvilken som helst) linje i filen:

```bash
machine github.com login <github-bruker> password <Personal Access Token>
```

**GitHub-bruker** er da din personlige bruker og IKKE brukernavnet ditt i SSB. **Personal Access Token** er det vi lagde i forrige kapittelet.

En veldig enkel måte å lagre dette er som følger. Anta at min personlige GitHub-bruker er **SSB-Chad** og at min Personal Access Token er **blablabla**. Da kan jeg gjøre følgende for å lagre det i **.netrc**:

1. Gå inn i Jupyterlab og åpne en Python-notebook.

2. I den første kodecellen skriver du:

```python
!echo "machine github.com login SSB-Chad password blablabla" >> ~/.netrc
```

Alternativt kan du droppe det utropstegnet og kjøre det direkte i en terminal. Det vil gi samme resultat. Koden over legger til en linje med teksten  

**machine github.com login SSB-Chad password blablabla**  

i en .netrc-fil på din hjemmeområdet, uanvhengig av om du har en fra før eller ikke. Hvis du har en fil fra før som allerede har et token fra GitHub, ville jeg nok slettet det før jeg legger en et nytt token.

Hver gang du jobber mot GitHub vil Git sjekke om informasjon om autentisering ligger i denne filen, og bruke den hvis den ligger der.

#### Oppdater PAT

I eksempelet over lagde vi en PAT som var gyldig i 90 dager. Dermed vil du ikke kunne jobbe mot GitHub med dette tokenet etter 90 dager. For å oppdatere tokenet gjør du følgende:

1. Lag et nytt PAT ved å repetere @sec-pat.

2. I miljøet der du skal jobbe med Git og GitHub går du inn i din **.netrc** og bytter ut token med det nye.

Og med det er du klar til å jobbe mot *statisticsnorway* på **GitHub**.

