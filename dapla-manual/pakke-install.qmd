# Installere pakker

## Python

Installering av pakker er kun er mulig I et [virtuelt miljø](virtual-env.qmd). Det er [anbefalt å benytte poetry](virtual-env.qmd#Anbefaling) til dette. Eksemplene videre tar derfor utgangspunkt i et poetry prosjekt.

Det er mulig å [installere pakker med pip](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/). Pakker kan installeres som normalt, hvis man har satt opp og aktivert et [virtuelt miljø](virtual-env.qmd).

### Poetry prosjekt eksempel

Dette eksemplet viser hvordan man setter oppe et enkelt poetry prosjekt kalt test, hvis man ønsker å benytte et annet prosjektnavn må man endre dette i hver av kommandoene.

Sett opp prosjektet:

``` bash
poetry new test
```

Naviger inn i prosjektmappen:

``` bash
cd test
```

Bruk poetry install for å bygge prosjektet:

``` bash
poetry install
```

Hvis man får en tilbakemelding som denne er prosjektet satt opp korrekt:

``` shell
Creating virtualenv test-EojoH6Zm-py3.10 in /home/jovyan/.cache/pypoetry/virtualenvs 
Updating dependencies 
Resolving dependencies... (0.1s) 

Writing lock file 
```

### Installering

For å legge til pakker i et prosjekt benyttes kommandoen poetry add.

Skal man legge til pakken "pendulum" vil det se slik ut:

``` bash
poetry add pendulum
```

Poetry tilbyr måter å sette versjonsbegrensninger for pakker som legges til i et prosjekt, dette kan man [lese mer om her.](https://python-poetry.org/docs/cli/#add)

### Avinstallering

For å fjerne pakker fra et prosjekt benytter man poetry remove.

Hvis man ønsker å fjerne "pendulum" fra et prosjekt vil kommandoen se slik ut:

``` bash
poetry remove pendulum
```

### Oppgradere pakker

For å oppdatere pakker i et prosjekt benytter man kommandoen poetry update.

Skal man oppdatere pakken "pendulum" bruker man:

``` bash
poetry update pendulum
```

Skal man oppdatre alle pakken i et prosjekt benytter man:

``` bash
poetry update 
```

### Dependabot

Når man installerer pakker så vil det etter hvert utvikle seg et sett av potensielt kompliserte avhengigheter mellom disse pakkene. Dette skyldes at en pakke kan benytte seg av funksjonalitet i andre pakker, som igjen benytter seg av funksjonalitet i andre pakker, osv.. Hvis noen finner en sikkerhetssårbarhet i en pakke så kan det fikses ved at en ny versjon av den pakken slippes, som igjen kan få konsekvenser for pakker som er avhengig av denne.

I SSB er det tilrettelagt for at alle som versjonshåndterer koden sin på GitHub kan skanne pakkene sine for sårbarheter og nye versjoner av pakker med [Dependabot](https://docs.github.com/en/code-security/dependabot/dependabot-security-updates/about-dependabot-security-updates). Dependabot hjelper oss med å finne og fikse sårbarheter og gamle pakkeversjoner. Dette er spesielt viktig når man installerer sine egne pakker.

Det er anbefalt at alle som installerer sine egne pakker i SSB skrur på Dependabot i sine GitHub-repoer. Du kan skru på ved å gjøre følgende:

-   Gå inn repoet
-   Trykk på **Settings** for det repoet som vist på @fig-github-repo-settings-button.

![Åpne *Settings* for et GitHub-repo.](images/github_repo_settings_button.png){#fig-github-repo-settings-button fig-alt="Bilde av knappen man trykker på for å komme inn i repo-settings"}

-   I menyen til venstre velger du **Code security and analysis**

-   Under seksjonen **Dependabot** velger **Enable** på minst **Dependabot alerts** og **Dependabot security updates**, slik som vist i @fig-github-dependabot.

![Skru på Dependabot i GitHub.](images/github_dependabot.png){#fig-github-dependabot fig-alt="Bilde som indikerer hvor man skrur på Dependabot i GitHub"}

Når du har gjort dette vil GitHub varsle deg hvis det finnes en kjent sårbarhet i pakkene som benyttes.

### Legge til kernel for poetry

For å kunne benytte det virtuelle miljøet i en notebook må man sette opp en kernel. Kernel burde gis samme navn som prosjektet.

Først legger man til ipykernel:

``` bash
poetry add ipykernel
```

Så opprettes kernel med:

``` bash
poetry run python -m ipykernel install --user --name test
```

Etter dette er kernelen test opprettet og kan velges for å benytte miljøet i en notebook.

### Fjerne kernel

For å fjerne en kernel med navn test bruker man:

``` bash
jupyter kernelspec remove test
```

Du vil bli spurt om å bekrefte, trykk y hvis man ønsker å slette:

``` shell
Kernel specs to remove:
  test                    /home/jovyan/.local/share/jupyter/kernels/test
Remove 1 kernel specs [y/N]: y
```

Etter dette er kernelen fjernet.

### Sikkerhet

Hvem som helst kan legge til pakker på PyPi, det betyr at de i verstefall, kan inneholde skadelig kode. Her er en list med viktige tiltak som minimere risikoen:

a)  Før man installerer pakker bør man alltid søke de opp på <https://pypi.org>. Det er anbefalt å klippe og lime inn pakkenavnet når man skal legge det til i et prosjekt.

b)  Er det et populært/velkjent prosjekt? Hvor mange stjerner og forks har repoet?

## R

Installering av pakker for R-miljøet i Jupyterlab er foreløpig ikke en del av [ssb-project](https://github.com/statisticsnorway/ssb-project-cli) enda. Men vi kan bruke [renv](https://rstudio.github.io/renv/articles/renv.html) til dette. Generelt, anbefaler vi at du **skriver koden din i .R filer og åpne disse som en notebook**. Dvs. ikke bruke .ipynb notebooks til R. Ved bruk av .R filer kan renv se hvilke pakker er i bruk i prosjektet og håndtering av disse er lettere.

Oppretting av renv-miljø og installering av pakker anbefales å gjøres fra terminal. Dette er fordi det trengs å gjøres kun en gang for et prosjekt. For å starte R i terminalen i Jupyter/DAPLA:

1.  Åpne en terminal fra Launcher
2.  Stå i mappen der du vil aktivere det virtuelle miljøet/installere pakker, dvs prosjekt mappen.
3.  Starte R ved å skrive in `R`

Det vi nå har gjort er å åpne **R** fra terminalen slik at vi kan skrive R-kode direkte i terminalen. Det omtales ofte som en *R Console*. I RStudio finne du terminalen i fanen ved siden av "Console".

### Starte en ny renv

For å installere dine egne R-pakker må du opprette et virtuelt miljø med **renv**. Dette kan gjøres ved å skriver:

``` r
renv::init()
```

Kommandoen aktiverer et virtuelt miljø i mappen du står i. Rent praktisk vil det si at du fikk følgende filer/mapper i mappen din:

-   **renv.lock**\
    En fil som inneholder versjoner av alle pakker du benytter i koden din.

-   **.Rprofile** En fil som inneholder informasjon om oppsetting av miljø og alternative.

-   **renv**\
    Mappe som inneholder alle pakkene du installerer.

-   **renv/activate.R** En fil som aktivere renv miljø for et prosjekt.

**Hvis prosjektet ligger på GitHub, skal filene `renv.lock`, `.Rprofile` og `renv/activate.R` være på GitHub**

### Installering av pakker

Nå som vi har et virtuelle miljøet på plass kan vi installere R-pakker. Vi installere pakker ved funksjonen `renv::install()`. For eksempel:

``` r
renv::install("PxWebApiData")
```

Dette installerer pakken [PxWebApiData](https://cran.r-project.org/web/packages/PxWebApiData/vignettes/Introduction.html) fra den R sentral repository CRAN. Dette er en pakke skrevet for å hente ut data fra SSBs statistikkbank.

Det er også mulig å installere pakker som ligger på SSBs GitHub. Da må vi spesifisere at pakke ligger på 'statisticsnorway' område. For eksempel:

``` r
renv::install("statisticsnorway/klassR")
```

Pakken [klassR](https://statisticsnorway.github.io/klassR/articles/klassR-vignette.html) er skrevet for å hente ut klassifikasjoner fra SSBs KLASS. Det er en public repository på Github og åpen for alle å laste ned.

:::{.callout-note}
Merknad: Det er anbefalt å kjøre R fra .R filer. Hvis du kjøre R fra en jupyter notebook (.ipynb) må du også installere pakken [IRkernel](https://cran.rstudio.com/web/packages/IRkernel/index.html) for at renv skal fungere. I tillegg vil ikke renv  se hvilken pakker er benyttet i prosjektet. Jupyter notebooks (.ipynb filer) kan speiles til .Rmd filer ved å skrive
:::

Hvis prosjekt er opprettet av en annen person og har blitt delt med deg, kan alle pakkene som trengs i prosjektet installeres ved:

``` r
renv:restore()
```
Hvis du selv har ikke benyttet renv i prosjektet tidligere må du kjøre `renv::init()` på forhånd.


### Lagre pakkeversjonen til renv

For å lagre pakkeversjon til .lockfil må koden din benytte pakken ved funksjonen `library()` et sted i prosjektet (på en .R fil). For eksempel kan vi benytte pakken `PxWebApiData` i koden vår ved:

``` r
library(PxWebApiData)
ApiData("https://data.ssb.no/api/v0/en/table/04861", 
        Region = c("1103", "0301"), ContentsCode = "Bosatte", Tid = c(1, 2, -2, -1))
```

For å legge pakken inn i .lockfilen skriver vi i R på terminal:

``` r
renv::snapshot()
```

Det betyr at både du og andre kan gjennskape de pakkene og versjoner som du har installerte. Kikker du nå inne i **renv.lock**-filen så ser du nå at verjsonen av **PxWebApiData** er lagt til. I bildet under ser du hvordan et arbeidsmiljø typisk kan se ut når man installerer sine egne pakker.

![](images/renv_install.png)


### Avinstallering

Individe pakker kan fjernes fra miljø ved `renv::`remove()\` funksjonen. For eksempel:

``` r
renv::remove("PxWebApiData")
```

For å fjerne fra **renv.lock**-filen også må du ta en `snapshot()` etterpå.

``` r
renv::snapshot()
```

En annen nyttig funksjon er `renv::clean()`. Dette fjerner alle pakker fra library som ikke er i bruk

``` r
renv::clean()
```

Igjen må du ta en `snapshot()` for at endringer skal lagres på **renv.lock**-filen


### Oppgradere pakker

For å oppgradere en pakke kan du bruke `renv::update()`. For eksempel å oppgradere `PxWebApiData` skriv:

``` r
renv::update("PxWebApiData")
```

For å installere et spesifikk versjon av en pakke kan du spesifisere dette med installering med `@` og versjonsnummer. For eksempel å installere `PxWEbApiData` versjon 0.4.0:

``` r
renv::install("PxWebApiData@0.4.0")
```

Husk å ta en `snapshot()` etterpå for å lagre endringer til **renv.lock**-filen. Det betyr at du og andre kan gjenskape miljø på nytt.

``` r
renv::snapshot()
```

### Hva skal står i kjørekoden?

Koden over kan kjøres fra R i terminal og skal kun kjøres en gang. Men for å aktivere miljø og pakker som skal brukes må det aktiveres ved starten av koden din. I RStudio går dette automatisk ved hjelp av .Rprofile filen. I JupyterLab når du åpne en .R-fil som en notebook må det aktiveres ved for eksempel:

``` r
renv::autoload()
```

Deretter kan du benytte pakker og funksjoner ved `library()` osv. Funkjsonen `renv::autoload()` vil si ifra at du ønsker å benytte et renv miljø og vil letter etter filene i prosjektetfor å aktivere miljø (både i prosjekt-mappen og i foreldre-mapper).

For å dele koden med andre, må de også kjøre `renv::restore()` (første gang) for å installere alle pakkene som ligger i .lock filen.
