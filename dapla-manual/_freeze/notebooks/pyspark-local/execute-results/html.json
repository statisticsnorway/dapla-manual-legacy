{
  "hash": "267ed99ac4a599dfbd6f07f4d7d37434",
  "result": {
    "markdown": "---\ntitle: Tidsserier med Spark\n---\n\n\n\nI denne notebooken vises noen enkle eksempler på hvordan du kan jobbe med tidsserier i PySpark. Denne notebooken er kjørt i prodmiljøet på **Dapla** med `Pyspark (local)`-kernel.\n\n\n::: {.cell tags='[]' execution_count=1}\n``` {.python .cell-code}\n# Importer biblioteker\nimport numpy as np\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import date_format, explode, expr, sequence\nfrom pyspark.sql.types import DateType, DoubleType, StructField, StructType\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=2}\n``` {.python .cell-code}\n# Initialize a SparkSession\nspark = SparkSession.builder.master(\"local[1]\") \\\n                    .appName('SparkByExamples.com') \\\n                    .getOrCreate()\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=3}\n``` {.python .cell-code}\n# Generate a sequence of dates\ndates_df = spark.range(1).select(\n    explode(\n        sequence(\n            start=expr(\"date '2000-01-01'\"),\n            stop=expr(\"date '2023-08-01'\"),\n            step=expr(\"interval 1 month\"),\n        )\n    ).alias(\"Date\")\n)\ndates_df.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+\n|      Date|\n+----------+\n|2000-01-01|\n|2000-02-01|\n|2000-03-01|\n|2000-04-01|\n|2000-05-01|\n|2000-06-01|\n|2000-07-01|\n|2000-08-01|\n|2000-09-01|\n|2000-10-01|\n|2000-11-01|\n|2000-12-01|\n|2001-01-01|\n|2001-02-01|\n|2001-03-01|\n|2001-04-01|\n|2001-05-01|\n|2001-06-01|\n|2001-07-01|\n|2001-08-01|\n+----------+\nonly showing top 20 rows\n\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=4}\n``` {.python .cell-code}\n# Genererer random walk data\nschema = StructType(\n    [StructField(f\"serie{i:02d}\", DoubleType(), True) for i in range(100)]\n)\n\ndata = [\n    tuple((10 + np.random.normal(0, 1, 100)).cumsum().tolist())\n    for _ in range(284)  # 284 months from 2000-01 to 2023-08\n]\n\ndata_df = spark.createDataFrame(data, schema=schema)\n\ndata_df.select(\"serie00\", \"serie01\").show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+------------------+------------------+\n|           serie00|           serie01|\n+------------------+------------------+\n|10.739018445197303| 22.09785407854686|\n| 10.09607353951871|20.431009034974196|\n|10.218275816724578| 20.37317931446963|\n| 9.272631468532797|19.644892026879578|\n|11.258167390456387| 22.08055558098499|\n| 9.456934023241878|20.739404120988528|\n| 12.22619259985711|21.332850118728203|\n|10.419222642558005|21.658933280319474|\n| 10.20009162543689| 22.29740390620102|\n|  8.05584562331776| 17.83175586745697|\n|10.082600381444006|21.146188019503505|\n| 8.923332768402284|19.341044440457555|\n| 9.564753406038422|20.039167830102933|\n|11.029429116257255|21.413393931895826|\n| 9.589811578308375| 18.12777841779368|\n|10.144932261527781|21.234332096088835|\n|10.990644143495318|20.819676008260323|\n| 9.083410974058628| 17.94722109888361|\n| 11.21247460441993|21.379839755283925|\n| 8.883968948243803|18.903471313592725|\n+------------------+------------------+\nonly showing top 20 rows\n\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n# Legger til row index til DataFrame før join med dates_df\ndata_df = data_df.withColumn(\"row_index\", expr(\"monotonically_increasing_id()\"))\n\n# Joiner de to datasettene\ndf = (\n    dates_df.withColumn(\"row_index\", expr(\"monotonically_increasing_id()\"))\n    .join(data_df, \"row_index\")\n    .drop(\"row_index\")\n)\n\n# Legger til år, kvartal og mnd\ndf = df.withColumn(\"Year\", date_format(df.Date, \"yyyy\"))\ndf = df.withColumn(\"Quarter\", expr(\"quarter(Date)\"))\ndf = df.withColumn(\"Month\", date_format(df.Date, \"MM\"))\n\ndf.select(\"Date\",  \"Year\", \"Quarter\", \"Month\", \"serie00\", \"serie01\").show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+----+-------+-----+------------------+------------------+\n|      Date|Year|Quarter|Month|           serie00|           serie01|\n+----------+----+-------+-----+------------------+------------------+\n|2000-01-01|2000|      1|   01|12.436925435592983|21.509195252129597|\n|2000-02-01|2000|      1|   02| 8.420157075008795| 18.82269670539724|\n|2000-03-01|2000|      1|   03|10.067819605112247|20.556951690185045|\n|2000-04-01|2000|      2|   04|10.453477308741787| 20.31861172151253|\n|2000-05-01|2000|      2|   05|10.650657443028656|20.759831598965334|\n|2000-06-01|2000|      2|   06|  10.5007042368887|19.806093012573406|\n|2000-07-01|2000|      3|   07| 10.70721043150716| 20.12206851624365|\n|2000-08-01|2000|      3|   08| 9.197087069091303|21.403845453960148|\n|2000-09-01|2000|      3|   09|10.219172908154931| 18.88407010654914|\n|2000-10-01|2000|      4|   10|10.365269020148824|21.309179407903123|\n|2000-11-01|2000|      4|   11| 7.802919690617486|18.190829722911502|\n|2000-12-01|2000|      4|   12|10.434939745974196|   20.942989271217|\n|2001-01-01|2001|      1|   01| 9.212333674460366|18.168539040517658|\n|2001-02-01|2001|      1|   02|  9.78327936577598|19.182347198916588|\n|2001-03-01|2001|      1|   03| 9.744139476308197|19.515258734741472|\n|2001-04-01|2001|      2|   04|11.326533336843138|20.457971208135454|\n|2001-05-01|2001|      2|   05|10.054534219450588|20.163149056437973|\n|2001-06-01|2001|      2|   06| 11.23235410620082|22.719404716459906|\n|2001-07-01|2001|      3|   07|10.048550370644172|20.049359203962346|\n|2001-08-01|2001|      3|   08| 8.667920498719846| 18.71206085778354|\n+----------+----+-------+-----+------------------+------------------+\nonly showing top 20 rows\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pyspark-local_files"
    ],
    "filters": [],
    "includes": {}
  }
}