{
  "hash": "475e757ec5b5ba1d3be1529272ef1a18",
  "result": {
    "markdown": "---\ntitle: Tidsserier med Spark\n---\n\n\n\nI denne notebooken vises noen enkle eksempler på hvordan du kan jobbe med tidsserier i PySpark. Denne notebooken er kjørt i prodmiljøet på **Dapla** med `Pyspark (local)`-kernel.\n\n\n::: {.cell tags='[]' execution_count=1}\n``` {.python .cell-code}\n# Importer biblioteker\nimport numpy as np\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import date_format, explode, expr, sequence\nfrom pyspark.sql.types import DateType, DoubleType, StructField, StructType\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=2}\n``` {.python .cell-code}\n# Initialize a SparkSession\nspark = SparkSession.builder.master(\"local[1]\") \\\n                    .appName('SparkByExamples.com') \\\n                    .getOrCreate()\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=3}\n``` {.python .cell-code}\n# Generate a sequence of dates\ndates_df = spark.range(1).select(\n    explode(\n        sequence(\n            start=expr(\"date '2000-01-01'\"),\n            stop=expr(\"date '2023-08-01'\"),\n            step=expr(\"interval 1 month\"),\n        )\n    ).alias(\"Date\")\n)\ndates_df.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+\n|      Date|\n+----------+\n|2000-01-01|\n|2000-02-01|\n|2000-03-01|\n|2000-04-01|\n|2000-05-01|\n|2000-06-01|\n|2000-07-01|\n|2000-08-01|\n|2000-09-01|\n|2000-10-01|\n|2000-11-01|\n|2000-12-01|\n|2001-01-01|\n|2001-02-01|\n|2001-03-01|\n|2001-04-01|\n|2001-05-01|\n|2001-06-01|\n|2001-07-01|\n|2001-08-01|\n+----------+\nonly showing top 20 rows\n\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=4}\n``` {.python .cell-code}\n# Genererer random walk data\nschema = StructType(\n    [StructField(f\"serie{i:02d}\", DoubleType(), True) for i in range(100)]\n)\n\ndata = [\n    tuple((10 + np.random.normal(0, 1, 100)).cumsum().tolist())\n    for _ in range(284)  # 284 months from 2000-01 to 2023-08\n]\n\ndata_df = spark.createDataFrame(data, schema=schema)\n\ndata_df.select(\"serie00\", \"serie01\").show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+------------------+------------------+\n|           serie00|           serie01|\n+------------------+------------------+\n| 10.28552497082796| 18.80213440932389|\n|   9.2989592234365| 19.29443190926363|\n| 9.641691011493942| 18.39265495089296|\n|10.095600235251702|19.210869145255476|\n|10.598149885398882| 21.04002768054827|\n| 9.589494891543382|19.444913286211904|\n| 8.949769940462296|17.256517957204697|\n|10.268826124760595|21.924880828385007|\n| 8.433705199373218| 18.27099790039972|\n| 9.591527268314453|18.644221035018294|\n| 9.285955387695676| 21.07566671691805|\n|10.513149406143489|21.896507412493104|\n|10.746275077506867| 19.94937133987704|\n|10.422822429410505| 21.00460601739491|\n| 9.855151113581227|19.900805138755697|\n| 9.907391678199144| 20.09316407526652|\n|   11.910837422526|20.458605571861405|\n|11.900773767457748|22.034612549696465|\n| 9.627286028962596| 19.28652948261321|\n|10.636674573465507|20.860349444400374|\n+------------------+------------------+\nonly showing top 20 rows\n\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n# Legger til row index til DataFrame før join med dates_df\ndata_df = data_df.withColumn(\"row_index\", expr(\"monotonically_increasing_id()\"))\n\n# Joiner de to datasettene\ndf = (\n    dates_df.withColumn(\"row_index\", expr(\"monotonically_increasing_id()\"))\n    .join(data_df, \"row_index\")\n    .drop(\"row_index\")\n)\n\n# Legger til år, kvartal og mnd\ndf = df.withColumn(\"Year\", date_format(df.Date, \"yyyy\"))\ndf = df.withColumn(\"Quarter\", expr(\"quarter(Date)\"))\ndf = df.withColumn(\"Month\", date_format(df.Date, \"MM\"))\n\ndf.select(\"Date\",  \"Year\", \"Quarter\", \"Month\", \"serie00\", \"serie01\").show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+----+-------+-----+------------------+------------------+\n|      Date|Year|Quarter|Month|           serie00|           serie01|\n+----------+----+-------+-----+------------------+------------------+\n|2000-01-01|2000|      1|   01|10.704067839807966|19.806605259386576|\n|2000-02-01|2000|      1|   02| 9.993509489905344| 21.02908289357401|\n|2000-03-01|2000|      1|   03|10.844481778491335|21.594184969233666|\n|2000-04-01|2000|      2|   04| 9.983524978212996| 20.77975958435706|\n|2000-05-01|2000|      2|   05|10.662027203131691|21.298218459469076|\n|2000-06-01|2000|      2|   06|11.306200406865427| 22.21276903169298|\n|2000-07-01|2000|      3|   07|10.273584558625396|19.559994622897797|\n|2000-08-01|2000|      3|   08|10.992524143589362| 20.45220088288665|\n|2000-09-01|2000|      3|   09|10.282296888132114|20.861802251700826|\n|2000-10-01|2000|      4|   10|10.902266221974365| 22.48748166939777|\n|2000-11-01|2000|      4|   11| 8.266550146677737|16.863204651845365|\n|2000-12-01|2000|      4|   12| 9.237088445481582| 19.26904214842979|\n|2001-01-01|2001|      1|   01|11.726643478429851|21.561609108404078|\n|2001-02-01|2001|      1|   02| 10.90211843894425| 21.82958346090264|\n|2001-03-01|2001|      1|   03|  9.45763266226521|19.619683788368224|\n|2001-04-01|2001|      2|   04|10.099360702188173|19.159841785747737|\n|2001-05-01|2001|      2|   05| 12.12908433159167|20.813306808213298|\n|2001-06-01|2001|      2|   06|  8.98981102798096|21.046785143421218|\n|2001-07-01|2001|      3|   07|10.183740564710039|19.928482759490905|\n|2001-08-01|2001|      3|   08| 11.23208844317083| 21.31037435192478|\n+----------+----+-------+-----+------------------+------------------+\nonly showing top 20 rows\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pyspark-local_files"
    ],
    "filters": [],
    "includes": {}
  }
}